# Enhanced nginx configuration for load balancing and security
user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

# Performance optimization
worker_rlimit_nofile 65535;

events {
    worker_connections 4096;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Content-Security-Policy "default-src 'self'" always;

    # Performance optimizations
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 100M;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=auth:10m rate=5r/s;

    # Upstream definitions for load balancing
    upstream agent_service {
        least_conn;
        server agent-service:8001 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    upstream orchestrator_service {
        least_conn;
        server orchestrator:3001 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    # Health check endpoint
    server {
        listen 80;
        server_name _;
        
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
    }

    # Main API Gateway server
    server {
        listen 80;
        server_name localhost api.genesisos.local;
        
        # Security
        server_tokens off;
        
        # Logging
        access_log /var/log/nginx/access.log;
        error_log /var/log/nginx/error.log;

        # Agent service routes
        location ~ ^/api/agents/(.*)$ {
            limit_req zone=api burst=20 nodelay;
            
            proxy_pass http://agent_service/agent/$1$is_args$args;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
            
            # Timeouts
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 60s;
            
            # Circuit breaker simulation
            proxy_next_upstream error timeout http_502 http_503 http_504;
        }

        # Voice synthesis routes
        location ~ ^/api/voice/(.*)$ {
            limit_req zone=api burst=10 nodelay;
            
            proxy_pass http://agent_service/voice/$1$is_args$args;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Larger timeout for voice processing
            proxy_read_timeout 120s;
            
            proxy_next_upstream error timeout http_502 http_503 http_504;
        }

        # Simulation routes
        location ~ ^/api/simulation/(.*)$ {
            limit_req zone=api burst=5 nodelay;
            
            proxy_pass http://agent_service/simulation/$1$is_args$args;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Very long timeout for simulations
            proxy_read_timeout 300s;
            
            proxy_next_upstream error timeout http_502 http_503 http_504;
        }

        # Orchestrator workflow routes
        location ~ ^/api/workflows/(.*)$ {
            limit_req zone=api burst=15 nodelay;
            
            proxy_pass http://orchestrator_service/executeFlow$is_args$args;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Extended timeout for workflow execution
            proxy_read_timeout 180s;
            
            proxy_next_upstream error timeout http_502 http_503 http_504;
        }

        # Canvas generation routes
        location ~ ^/api/canvas/(.*)$ {
            limit_req zone=api burst=10 nodelay;
            
            proxy_pass http://orchestrator_service/generateCanvas$is_args$args;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Caching for canvas generation
            proxy_cache_valid 200 5m;
            
            proxy_next_upstream error timeout http_502 http_503 http_504;
        }

        # Monitoring and health routes (no rate limiting)
        location ~ ^/api/(health|status|metrics)$ {
            proxy_pass http://orchestrator_service/$1$is_args$args;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            proxy_next_upstream error timeout http_502 http_503 http_504;
        }

        # Authentication routes (stricter rate limiting)
        location ~ ^/api/(auth|login|register)(.*)$ {
            limit_req zone=auth burst=10 nodelay;
            
            proxy_pass http://orchestrator_service$uri$is_args$args;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            proxy_next_upstream error timeout http_502 http_503 http_504;
        }

        # Catch-all for other API routes
        location ~ ^/api/(.*)$ {
            limit_req zone=api burst=20 nodelay;
            
            proxy_pass http://orchestrator_service/$1$is_args$args;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            proxy_next_upstream error timeout http_502 http_503 http_504;
        }

        # WebSocket support for real-time features
        location /ws {
            proxy_pass http://orchestrator_service;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # WebSocket specific timeouts
            proxy_read_timeout 3600s;
            proxy_send_timeout 3600s;
        }

        # Static files and frontend (if serving from nginx)
        location / {
            try_files $uri $uri/ @fallback;
        }

        location @fallback {
            # Fallback to orchestrator for SPA routing
            proxy_pass http://orchestrator_service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Error pages
        error_page 404 /404.html;
        error_page 500 502 503 504 /50x.html;
        
        location = /50x.html {
            root /usr/share/nginx/html;
        }
    }

    # HTTPS server configuration (uncomment and configure SSL certificates)
    # server {
    #     listen 443 ssl http2;
    #     server_name localhost api.genesisos.local;
    #     
    #     ssl_certificate /etc/nginx/ssl/cert.pem;
    #     ssl_certificate_key /etc/nginx/ssl/key.pem;
    #     
    #     ssl_protocols TLSv1.2 TLSv1.3;
    #     ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
    #     ssl_prefer_server_ciphers off;
    #     
    #     # All the same location blocks as HTTP server
    #     include /etc/nginx/conf.d/api-locations.conf;
    # }
}